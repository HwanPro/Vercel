generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String               @id @default(cuid())
  phoneNumber  String               @unique
  image        String?
  role         String               @default("client")
  password     String?
  otpCode      String?
  twoFASecret  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  lastName     String               @default("")
  username     String               @unique
  firstName    String               @default("Sin nombre")
  accounts     Account[]
  attendances  Attendance[]         @relation("UserAttendance")
  profile      ClientProfile?
  payments     PaymentRecord[]      @relation("UserPayments")
  purchases    Purchase[]
  sessions     Session[]
  contacts     UserContact[]        @relation("UserContacts")
  memberships  UserMembershipPlan[]
  fingerprints Fingerprint[]
  
  // Relaciones del sistema de rutinas
  programAssignments    UserProgramAssignment[]  @relation("UserProgramAssignments")
  routineAssignments    UserRoutineAssignment[]  @relation("UserRoutineAssignments")
  workoutSessions       WorkoutSession[]         @relation("UserWorkoutSessions")
  progressSuggestions   ExerciseProgressSuggestion[] @relation("UserProgressSuggestions")

  @@map("users")
}

model MembershipPlan {
  membership_id       Int                  @id @default(autoincrement())
  membership_type     String
  membership_cost     Float
  membership_features String[]
  membership_created  DateTime             @default(now())
  membership_duration Int
  membership_users    UserMembershipPlan[]
}

model UserMembershipPlan {
  userId       String
  membershipId Int
  assignedAt   DateTime       @default(now())
  membership   MembershipPlan @relation(fields: [membershipId], references: [membership_id])
  user         User           @relation(fields: [userId], references: [id])

  @@id([userId, membershipId])
}

model PaymentRecord {
  payment_id        Int           @id @default(autoincrement())
  payer_user_id     String
  payment_amount    Decimal       @db.Decimal(10, 2)
  payment_date      DateTime      @default(now())
  client_profile_id String?
  createdAt         DateTime      @default(now())
  currency          String        @default("PEN")
  externalRef       String?
  note              String?
  payment_status    PaymentStatus @default(COMPLETED)
  updatedAt         DateTime      @updatedAt
  payment_method    PaymentMethod @default(CASH)
  payer_user        User          @relation("UserPayments", fields: [payer_user_id], references: [id])

  @@index([payer_user_id])
  @@index([client_profile_id])
  @@index([payment_date])
}

model UserContact {
  contact_id      Int      @id @default(autoincrement())
  contact_user_id String
  contact_message String
  contact_created DateTime @default(now())
  contact_user    User     @relation("UserContacts", fields: [contact_user_id], references: [id])
}

model ClientProfile {
  profile_plan            String?
  profile_start_date      DateTime?
  profile_end_date        DateTime?
  profile_emergency_phone String?
  profile_phone           String?
  user_id                 String       @unique
  profile_id              String       @id @default(cuid())
  profile_address         String?      @default("")
  profile_social          String?      @default("")
  profile_first_name      String?
  profile_last_name       String?
  debt                    Decimal      @default(0) @db.Decimal(10, 2)
  promoTotalDays          Int?
  promoUsedDays           Int?
  promoPreset             PromoPreset?
  user                    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model InventoryItem {
  item_id          String   @id @default(uuid())
  item_name        String
  item_description String
  item_price       Float
  item_discount    Float?
  item_stock       Int
  item_image_url   String
  item_created_at  DateTime @default(now())
  item_updated_at  DateTime @updatedAt
  purchases        Purchase[]

  item_category    String?  @default("general")
  is_admin_only    Boolean  @default(false)

  @@index([is_admin_only])
  @@index([item_category])
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  role              String  @default("client")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Purchase {
  id                String        @id @default(cuid())
  purchase_quantity Int
  purchase_total    Float
  purchase_date     DateTime      @default(now())
  customerId        String
  productId         String
  customer          User          @relation(fields: [customerId], references: [id])
  product           InventoryItem @relation(fields: [productId], references: [item_id])
}

model Attendance {
  id           String    @id @default(uuid())
  userId       String    @map("userId")
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  type         String    @default("gym")
  channel      String    @default("unknown")
  stationId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  durationMins Int?      @map("duration")
  user         User      @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
  @@map("Attendance")
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  imageUrl  String
  link      String?
  createdAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  createdAt   DateTime @default(now())
  slug        String   @unique
}

model Gallery {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
}

model Fingerprint {
  id            String   @id @default(cuid())
  user_id       String   @map("user_id")
  finger_index  Int      @default(0) @map("finger_index") // 0-9 (10 dedos)
  template      Bytes    @map("template")
  version       String?  @map("version") // ANSI/ISO/ZK
  device_serial String?  @map("device_serial")
  quality       Int?     @map("quality")
  template_size Int      @default(0) @map("template_size")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, finger_index])
  @@map("fingerprints")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String
  code      String
  token     String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_verifications")
}

model DailyDebt {
  id              String      @id @default(cuid())
  clientProfileId String
  productType     ProductType
  productName     String?
  amount          Decimal     @db.Decimal(10, 2)
  quantity        Int         @default(1)
  createdAt       DateTime    @default(now())
  createdBy       String?

  @@index([clientProfileId, createdAt])
  @@map("daily_debts")
}

model DebtHistory {
  id              String      @id @default(cuid())
  clientProfileId String
  productType     ProductType
  productName     String?
  amount          Decimal     @db.Decimal(10, 2)
  quantity        Int
  debtType        String
  createdAt       DateTime    @default(now())
  deletedAt       DateTime?
  createdBy       String?

  @@index([clientProfileId, createdAt])
  @@map("debt_history")
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PromoPreset {
  D30
  D90
  D180
  D365
  CUSTOM
}

enum ProductType {
  WATER_1_5
  WATER_2_5
  WATER_3_5
  PROTEIN_5
  PRE_WORKOUT_3
  PRE_WORKOUT_5
  PRE_WORKOUT_10
  CUSTOM
}

// ===== SISTEMA DE RUTINAS Y EJERCICIOS =====

model Exercise {
  id                    String   @id @default(cuid())
  slug                  String   @unique
  name                  String
  description           String?
  instructions          String?  // Paso a paso
  commonMistakes        String?  // Errores comunes
  tips                  String?  // Consejos
  primaryMuscle         String   // Músculo principal
  secondaryMuscles      String[] // Músculos secundarios
  equipment             String   // Equipo necesario
  level                 String   // beginner/intermediate/advanced
  mechanics             String   // compound/isolation
  category              String   // push/pull/legs/core/upper/lower/full-body/stretch/cardio
  tempo                 String?  // ej: "3-1-1"
  breathing             String?  // Patrón de respiración
  defaultRepMin         Int?     // Rango mínimo de repeticiones
  defaultRepMax         Int?     // Rango máximo de repeticiones
  defaultRestSec        Int?     // Descanso por defecto en segundos
  tags                  String[] // Tags para búsqueda
  isPublished           Boolean  @default(false)
  isVerified            Boolean  @default(false)
  createdBy             String?  // ID del usuario que lo creó
  updatedBy             String?  // ID del usuario que lo actualizó
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relaciones
  media                 ExerciseMedia[]
  routineItems          RoutineItem[]
  workoutExercises      WorkoutExercise[]
  progressSuggestions   ExerciseProgressSuggestion[]

  @@index([slug])
  @@index([primaryMuscle])
  @@index([equipment])
  @@index([level])
  @@index([isPublished])
  @@map("exercises")
}

model ExerciseMedia {
  id            String   @id @default(cuid())
  exerciseId    String
  type          String   // image/video
  url           String   // URL del archivo
  thumbnailUrl  String?  // URL del thumbnail (para videos)
  title         String?  // Título del media
  description   String?  // Descripción
  durationSec   Int?     // Duración en segundos (para videos)
  order         Int      @default(0) // Orden en la galería
  isCover       Boolean  @default(false) // Si es la imagen de portada
  createdAt     DateTime @default(now())
  
  // Relaciones
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId, order])
  @@map("exercise_media")
}

model ProgramTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  goal        String   // strength/hypertrophy/calisthenics/fat-loss
  level       String   // beginner/intermediate/advanced
  weeks       Int      // Duración en semanas
  tags        String[] // Tags para búsqueda
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  routines    RoutineTemplate[]
  userAssignments UserProgramAssignment[]

  @@index([isPublished])
  @@map("program_templates")
}

model RoutineTemplate {
  id          String   @id @default(cuid())
  programId   String?  // Opcional, puede ser rutina independiente
  name        String   // ej: "PUSH", "PULL", "LEGS", "FULL BODY A"
  description String?
  goal        String   // strength/hypertrophy/endurance
  level       String   // beginner/intermediate/advanced
  dayIndex    Int?     // Orden dentro de la semana (0-6)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  program     ProgramTemplate? @relation(fields: [programId], references: [id], onDelete: Cascade)
  items       RoutineItem[]
  userAssignments UserRoutineAssignment[]
  workoutSessions WorkoutSession[]

  @@index([programId])
  @@index([isPublished])
  @@map("routine_templates")
}

model RoutineItem {
  id            String   @id @default(cuid())
  routineId     String
  exerciseId    String
  order         Int      // Orden dentro de la rutina
  targetRepsMin Int?     // Repeticiones mínimas objetivo
  targetRepsMax Int?     // Repeticiones máximas objetivo
  targetSets    Int?     // Series objetivo
  targetRPE     Float?   // RPE objetivo
  targetRestSec Int?     // Descanso objetivo en segundos
  notes         String?  // Notas específicas
  isOptional    Boolean  @default(false) // Si es ejercicio opcional
  
  // Relaciones
  routine       RoutineTemplate @relation(fields: [routineId], references: [id], onDelete: Cascade)
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([routineId, order])
  @@map("routine_items")
}

model UserProgramAssignment {
  userId    String
  programId String
  startDate DateTime
  endDate   DateTime?
  active    Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  
  // Relaciones
  user      User @relation("UserProgramAssignments", fields: [userId], references: [id], onDelete: Cascade)
  program   ProgramTemplate @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@id([userId, programId])
  @@index([userId, active])
  @@map("user_program_assignments")
}

model UserRoutineAssignment {
  userId           String
  routineTemplateId String
  weekDay          Int     // 0-6 (domingo a sábado)
  active           Boolean @default(true)
  notes            String?
  createdAt        DateTime @default(now())
  
  // Relaciones
  user             User @relation("UserRoutineAssignments", fields: [userId], references: [id], onDelete: Cascade)
  routineTemplate  RoutineTemplate @relation(fields: [routineTemplateId], references: [id], onDelete: Cascade)

  @@id([userId, routineTemplateId, weekDay])
  @@index([userId, active])
  @@map("user_routine_assignments")
}

model WorkoutSession {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime @default(now())
  startTime         DateTime @default(now())
  endTime           DateTime?
  routineTemplateId String?  // Rutina seguida (opcional)
  notes             String?  // Notas generales de la sesión
  perceivedIntensity Float?  // RPE/RIR global de la sesión
  status            String   @default("in-progress") // in-progress/completed
  totalVolume       Float    @default(0) // Volumen total en kg
  totalSets         Int      @default(0) // Total de series
  totalReps         Int      @default(0) // Total de repeticiones
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relaciones
  user              User @relation("UserWorkoutSessions", fields: [userId], references: [id], onDelete: Cascade)
  routineTemplate   RoutineTemplate? @relation(fields: [routineTemplateId], references: [id])
  exercises         WorkoutExercise[]

  @@index([userId, date])
  @@index([status])
  @@map("workout_sessions")
}

model WorkoutExercise {
  id                String   @id @default(cuid())
  workoutSessionId  String
  exerciseId        String
  order             Int      // Orden dentro de la sesión
  notes             String?  // Notas específicas del ejercicio
  targetSets        Int?     // Series objetivo
  targetRepsMin     Int?     // Repeticiones mínimas objetivo
  targetRepsMax     Int?     // Repeticiones máximas objetivo
  targetRestSec     Int?     // Descanso objetivo
  
  // Relaciones
  workoutSession    WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exercise          Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets              WorkoutSet[]

  @@index([workoutSessionId, order])
  @@map("workout_exercises")
}

model WorkoutSet {
  id                String   @id @default(cuid())
  workoutExerciseId String
  setIndex          Int      // Índice de la serie (1, 2, 3...)
  weight            Float    // Peso usado en kg
  reps              Int      // Repeticiones realizadas
  rpe               Float?   // RPE de la serie
  isWarmup          Boolean  @default(false) // Si es serie de calentamiento
  restSec           Int?     // Descanso real tomado
  note              String?  // Nota específica de la serie
  completedAt       DateTime @default(now())
  
  // Relaciones
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@index([workoutExerciseId, setIndex])
  @@map("workout_sets")
}

model ExerciseProgressSuggestion {
  userId            String
  exerciseId        String
  suggestedWeight   Float?   // Peso sugerido
  suggestedRepsMin  Int?     // Repeticiones mínimas sugeridas
  suggestedRepsMax  Int?     // Repeticiones máximas sugeridas
  rationale         String?  // Razón de la sugerencia
  updatedAt         DateTime @updatedAt
  
  // Relaciones
  user              User @relation("UserProgressSuggestions", fields: [userId], references: [id], onDelete: Cascade)
  exercise          Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([userId, exerciseId])
  @@map("exercise_progress_suggestions")
}
