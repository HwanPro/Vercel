generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String               @id @default(cuid())
  name          String
  email         String?              @unique(map: "unique_email_null")
  image         String?
  role          String               @default("client")
  password      String
  isVerified    Boolean              @default(false)
  twoFASecret   String?
  createdAt     DateTime             @default(now())
  emailVerified Boolean              @default(false)
  updatedAt     DateTime             @updatedAt
  accounts      Account[]
  profile       ClientProfile?
  payments      PaymentRecord[]      @relation("UserPayments")
  purchases     Purchase[]
  sessions      Session[]
  contacts      UserContact[]        @relation("UserContacts")
  memberships   UserMembershipPlan[]
}

model MembershipPlan {
  membership_id       Int                  @id @default(autoincrement())
  membership_type     String
  membership_cost     Float
  membership_features String[]
  membership_created  DateTime             @default(now())
  membership_duration Int
  membership_users    UserMembershipPlan[]
}

model UserMembershipPlan {
  userId       String
  membershipId Int
  assignedAt   DateTime       @default(now())
  membership   MembershipPlan @relation(fields: [membershipId], references: [membership_id])
  user         User           @relation(fields: [userId], references: [id])

  @@id([userId, membershipId])
}

model PaymentRecord {
  payment_id     Int      @id @default(autoincrement())
  payer_user_id  String
  payment_amount Float
  payment_method String
  payment_date   DateTime @default(now())
  payer_user     User     @relation("UserPayments", fields: [payer_user_id], references: [id])
}

model UserContact {
  contact_id      Int      @id @default(autoincrement())
  contact_user_id String
  contact_message String
  contact_created DateTime @default(now())
  contact_user    User     @relation("UserContacts", fields: [contact_user_id], references: [id])
}

model ClientProfile {
  profile_first_name      String
  profile_last_name       String
  profile_plan            String?
  profile_start_date      DateTime?
  profile_end_date        DateTime?
  profile_created_at      DateTime  @default(now())
  profile_emergency_phone String
  profile_phone           String
  profile_updated_at      DateTime  @updatedAt
  user_id                 String    @unique
  profile_id              String    @id @default(cuid())
  isManual                Boolean   @default(true)
  user                    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model InventoryItem {
  item_id          String     @id @default(uuid())
  item_name        String
  item_description String
  item_price       Float
  item_discount    Float?
  item_stock       Int
  item_image_url   String
  item_created_at  DateTime   @default(now())
  item_updated_at  DateTime   @updatedAt
  purchases        Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  role              String  @default("client")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}

model Purchase {
  id                String        @id @default(cuid())
  purchase_quantity Int
  purchase_total    Float
  purchase_date     DateTime      @default(now())
  customerId        String
  productId         String
  customer          User          @relation(fields: [customerId], references: [id])
  product           InventoryItem @relation(fields: [productId], references: [item_id])
}
