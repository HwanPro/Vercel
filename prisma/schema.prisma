generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  String                       @id @default(cuid())
  phoneNumber         String                       @unique
  image               String?
  role                String                       @default("client")
  password            String?
  otpCode             String?
  twoFASecret         String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  lastName            String                       @default("")
  username            String                       @unique
  firstName           String                       @default("Sin nombre")
  accounts            Account[]
  attendances         Attendance[]                 @relation("UserAttendance")
  profile             ClientProfile?
  payments            PaymentRecord[]              @relation("UserPayments")
  purchases           Purchase[]
  sessions            Session[]
  contacts            UserContact[]                @relation("UserContacts")
  memberships         UserMembershipPlan[]
  progressSuggestions ExerciseProgressSuggestion[] @relation("UserProgressSuggestions")
  fingerprints        Fingerprint[]
  programAssignments  UserProgramAssignment[]      @relation("UserProgramAssignments")
  routineAssignments  UserRoutineAssignment[]      @relation("UserRoutineAssignments")
  workoutSessions     WorkoutSession[]             @relation("UserWorkoutSessions")

  @@map("users")
}

model MembershipPlan {
  membership_id       Int                  @id @default(autoincrement())
  membership_type     String
  membership_cost     Float
  membership_features String[]
  membership_created  DateTime             @default(now())
  membership_duration Int
  membership_users    UserMembershipPlan[]
}

model UserMembershipPlan {
  userId       String
  membershipId Int
  assignedAt   DateTime       @default(now())
  membership   MembershipPlan @relation(fields: [membershipId], references: [membership_id])
  user         User           @relation(fields: [userId], references: [id])

  @@id([userId, membershipId])
}

model PaymentRecord {
  payment_id        Int           @id @default(autoincrement())
  payer_user_id     String
  payment_amount    Decimal       @db.Decimal(10, 2)
  payment_date      DateTime      @default(now())
  client_profile_id String?
  createdAt         DateTime      @default(now())
  currency          String        @default("PEN")
  externalRef       String?
  note              String?
  payment_status    PaymentStatus @default(COMPLETED)
  updatedAt         DateTime      @updatedAt
  payment_method    PaymentMethod @default(CASH)
  payer_user        User          @relation("UserPayments", fields: [payer_user_id], references: [id])

  @@index([payer_user_id])
  @@index([client_profile_id])
  @@index([payment_date])
}

model UserContact {
  contact_id      Int      @id @default(autoincrement())
  contact_user_id String
  contact_message String
  contact_created DateTime @default(now())
  contact_user    User     @relation("UserContacts", fields: [contact_user_id], references: [id])
}

model ClientProfile {
  profile_plan            String?
  profile_start_date      DateTime?
  profile_end_date        DateTime?
  profile_emergency_phone String?
  profile_phone           String?
  user_id                 String       @unique
  profile_id              String       @id @default(cuid())
  profile_address         String?      @default("")
  profile_social          String?      @default("")
  profile_first_name      String?
  profile_last_name       String?
  debt                    Decimal      @default(0) @db.Decimal(10, 2)
  promoTotalDays          Int?
  promoUsedDays           Int?
  promoPreset             PromoPreset?
  user                    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model InventoryItem {
  item_id          String     @id @default(uuid())
  item_name        String
  item_description String
  item_price       Float
  item_discount    Float?
  item_stock       Int
  item_image_url   String
  item_created_at  DateTime   @default(now())
  item_updated_at  DateTime   @updatedAt
  is_admin_only    Boolean    @default(false)
  item_category    String?    @default("general")
  purchases        Purchase[]

  @@index([is_admin_only])
  @@index([item_category])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  role              String  @default("client")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Purchase {
  id                String        @id @default(cuid())
  purchase_quantity Int
  purchase_total    Float
  purchase_date     DateTime      @default(now())
  customerId        String
  productId         String
  customer          User          @relation(fields: [customerId], references: [id])
  product           InventoryItem @relation(fields: [productId], references: [item_id])
}

model Attendance {
  id           String    @id @default(uuid())
  userId       String    @map("userId")
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  type         String    @default("gym")
  channel      String    @default("unknown")
  stationId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  durationMins Int?      @map("duration")
  user         User      @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
  @@map("Attendance")
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  imageUrl  String
  link      String?
  createdAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  createdAt   DateTime @default(now())
  slug        String   @unique
}

model Gallery {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
}

model Fingerprint {
  id            String   @id @default(cuid())
  template      Bytes    @map("template")
  user_id       String   @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  finger_index  Int      @default(0) @map("finger_index")
  version       String?  @map("version")
  device_serial String?  @map("device_serial")
  quality       Int?     @map("quality")
  template_size Int      @default(0) @map("template_size")
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, finger_index])
  @@map("fingerprints")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String
  code      String
  token     String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_verifications")
}

model DailyDebt {
  id              String      @id @default(cuid())
  clientProfileId String
  productType     ProductType
  productName     String?
  amount          Decimal     @db.Decimal(10, 2)
  quantity        Int         @default(1)
  createdAt       DateTime    @default(now())
  createdBy       String?

  @@index([clientProfileId, createdAt])
  @@map("daily_debts")
}

model DebtHistory {
  id              String      @id @default(cuid())
  clientProfileId String
  productType     ProductType
  productName     String?
  amount          Decimal     @db.Decimal(10, 2)
  quantity        Int
  debtType        String
  createdAt       DateTime    @default(now())
  deletedAt       DateTime?
  createdBy       String?

  @@index([clientProfileId, createdAt])
  @@map("debt_history")
}

model Exercise {
  id                  String                       @id @default(cuid())
  slug                String                       @unique
  name                String
  description         String?
  instructions        String?
  commonMistakes      String?
  tips                String?
  primaryMuscle       String
  secondaryMuscles    String[]
  equipment           String
  level               String
  mechanics           String
  category            String
  tempo               String?
  breathing           String?
  defaultRepMin       Int?
  defaultRepMax       Int?
  defaultRestSec      Int?
  tags                String[]
  isPublished         Boolean                      @default(false)
  isVerified          Boolean                      @default(false)
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  media               ExerciseMedia[]
  progressSuggestions ExerciseProgressSuggestion[]
  routineItems        RoutineItem[]
  workoutExercises    WorkoutExercise[]

  @@index([slug])
  @@index([primaryMuscle])
  @@index([equipment])
  @@index([level])
  @@index([isPublished])
  @@map("exercises")
}

model ExerciseMedia {
  id           String   @id @default(cuid())
  exerciseId   String
  type         String
  url          String
  thumbnailUrl String?
  title        String?
  description  String?
  durationSec  Int?
  order        Int      @default(0)
  isCover      Boolean  @default(false)
  createdAt    DateTime @default(now())
  exercise     Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId, order])
  @@map("exercise_media")
}

model ProgramTemplate {
  id              String                  @id @default(cuid())
  name            String
  description     String?
  goal            String
  level           String
  weeks           Int
  tags            String[]
  isPublished     Boolean                 @default(false)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  routines        RoutineTemplate[]
  userAssignments UserProgramAssignment[]

  @@index([isPublished])
  @@map("program_templates")
}

model RoutineTemplate {
  id              String                  @id @default(cuid())
  programId       String?
  name            String
  description     String?
  goal            String
  level           String
  dayIndex        Int?
  isPublished     Boolean                 @default(false)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  items           RoutineItem[]
  program         ProgramTemplate?        @relation(fields: [programId], references: [id], onDelete: Cascade)
  userAssignments UserRoutineAssignment[]
  workoutSessions WorkoutSession[]

  @@index([programId])
  @@index([isPublished])
  @@map("routine_templates")
}

model RoutineItem {
  id            String          @id @default(cuid())
  routineId     String
  exerciseId    String
  order         Int
  targetRepsMin Int?
  targetRepsMax Int?
  targetSets    Int?
  targetRPE     Float?
  targetRestSec Int?
  notes         String?
  isOptional    Boolean         @default(false)
  exercise      Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  routine       RoutineTemplate @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@index([routineId, order])
  @@map("routine_items")
}

model UserProgramAssignment {
  userId    String
  programId String
  startDate DateTime
  endDate   DateTime?
  active    Boolean         @default(true)
  notes     String?
  createdAt DateTime        @default(now())
  program   ProgramTemplate @relation(fields: [programId], references: [id], onDelete: Cascade)
  user      User            @relation("UserProgramAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, programId])
  @@index([userId, active])
  @@map("user_program_assignments")
}

model UserRoutineAssignment {
  userId            String
  routineTemplateId String
  weekDay           Int
  active            Boolean         @default(true)
  notes             String?
  createdAt         DateTime        @default(now())
  routineTemplate   RoutineTemplate @relation(fields: [routineTemplateId], references: [id], onDelete: Cascade)
  user              User            @relation("UserRoutineAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, routineTemplateId, weekDay])
  @@index([userId, active])
  @@map("user_routine_assignments")
}

model WorkoutSession {
  id                 String            @id @default(cuid())
  userId             String
  date               DateTime          @default(now())
  startTime          DateTime          @default(now())
  endTime            DateTime?
  routineTemplateId  String?
  notes              String?
  perceivedIntensity Float?
  status             String            @default("in-progress")
  totalVolume        Float             @default(0)
  totalSets          Int               @default(0)
  totalReps          Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  exercises          WorkoutExercise[]
  routineTemplate    RoutineTemplate?  @relation(fields: [routineTemplateId], references: [id])
  user               User              @relation("UserWorkoutSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([status])
  @@map("workout_sessions")
}

model WorkoutExercise {
  id               String         @id @default(cuid())
  workoutSessionId String
  exerciseId       String
  order            Int
  notes            String?
  targetSets       Int?
  targetRepsMin    Int?
  targetRepsMax    Int?
  targetRestSec    Int?
  exercise         Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  sets             WorkoutSet[]

  @@index([workoutSessionId, order])
  @@map("workout_exercises")
}

model WorkoutSet {
  id                String          @id @default(cuid())
  workoutExerciseId String
  setIndex          Int
  weight            Float
  reps              Int
  rpe               Float?
  isWarmup          Boolean         @default(false)
  restSec           Int?
  note              String?
  completedAt       DateTime        @default(now())
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@index([workoutExerciseId, setIndex])
  @@map("workout_sets")
}

model ExerciseProgressSuggestion {
  userId           String
  exerciseId       String
  suggestedWeight  Float?
  suggestedRepsMin Int?
  suggestedRepsMax Int?
  rationale        String?
  updatedAt        DateTime @updatedAt
  exercise         Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user             User     @relation("UserProgressSuggestions", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, exerciseId])
  @@map("exercise_progress_suggestions")
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PromoPreset {
  D30
  D90
  D180
  D365
  CUSTOM
}

enum ProductType {
  WATER_1_5
  WATER_2_5
  WATER_3_5
  PROTEIN_5
  PRE_WORKOUT_3
  PRE_WORKOUT_5
  PRE_WORKOUT_10
  CUSTOM
}
