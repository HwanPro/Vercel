generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String               @id @default(cuid())
  phoneNumber  String               @unique
  image        String?
  role         String               @default("client")
  password     String?
  otpCode      String?
  twoFASecret  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  lastName     String               @default("")
  username     String               @unique
  firstName    String               @default("Sin nombre")
  accounts     Account[]
  attendances  Attendance[]         @relation("UserAttendance")
  profile      ClientProfile?
  payments     PaymentRecord[]      @relation("UserPayments")
  purchases    Purchase[]
  sessions     Session[]
  contacts     UserContact[]        @relation("UserContacts")
  memberships  UserMembershipPlan[]
  fingerprints Fingerprint?
  emailVerification EmailVerification?

  @@map("users")
}

model MembershipPlan {
  membership_id       Int                  @id @default(autoincrement())
  membership_type     String
  membership_cost     Float
  membership_features String[]
  membership_created  DateTime             @default(now())
  membership_duration Int
  membership_users    UserMembershipPlan[]
}

model UserMembershipPlan {
  userId       String
  membershipId Int
  assignedAt   DateTime       @default(now())
  membership   MembershipPlan @relation(fields: [membershipId], references: [membership_id])
  user         User           @relation(fields: [userId], references: [id])

  @@id([userId, membershipId])
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model PaymentRecord {
  payment_id        Int            @id @default(autoincrement())
  payer_user_id     String
  payer_user        User           @relation("UserPayments", fields: [payer_user_id], references: [id])

  // NUEVO: vínculo directo al cliente (si el pago es por un plan de cliente)
  client_profile_id String?       
  client_profile    ClientProfile? @relation(fields: [client_profile_id], references: [profile_id])

  payment_amount    Decimal        @db.Decimal(10, 2)
  payment_method    PaymentMethod  @default(CASH)
  payment_status    PaymentStatus  @default(COMPLETED)
  currency          String         @default("PEN")
  note              String?
  externalRef       String?        // p.ej. ID de transacción procesador

  payment_date      DateTime       @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([payer_user_id])
  @@index([client_profile_id])
  @@index([payment_date])
}


model UserContact {
  contact_id      Int      @id @default(autoincrement())
  contact_user_id String
  contact_message String
  contact_created DateTime @default(now())
  contact_user    User     @relation("UserContacts", fields: [contact_user_id], references: [id])
}

// En la parte superior, declara el enum:
enum PromoPreset {
  D30
  D90
  D180
  D365
  CUSTOM
}

model ClientProfile {
  profile_id              String    @id @default(cuid())
  user_id                 String    @unique
  user                    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  profile_plan            String?
  profile_start_date      DateTime?
  profile_end_date        DateTime?
  profile_emergency_phone String?
  profile_phone           String?
  profile_address         String?   @default("")
  profile_social          String?   @default("")
  profile_first_name      String?
  profile_last_name       String?

  // NUEVOS CAMPOS:
  debt            Decimal   @db.Decimal(10, 2) @default(0)
  promoPreset     PromoPreset?
  promoTotalDays  Int?
  promoUsedDays   Int?

  // Relación con pagos (si quieres enlazar pagos al perfil)
  payments        PaymentRecord[]
}

model InventoryItem {
  item_id          String     @id @default(uuid())
  item_name        String
  item_description String
  item_price       Float
  item_discount    Float?
  item_stock       Int
  item_image_url   String
  item_created_at  DateTime   @default(now())
  item_updated_at  DateTime   @updatedAt
  purchases        Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  role              String  @default("client")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Purchase {
  id                String        @id @default(cuid())
  purchase_quantity Int
  purchase_total    Float
  purchase_date     DateTime      @default(now())
  customerId        String
  productId         String
  customer          User          @relation(fields: [customerId], references: [id])
  product           InventoryItem @relation(fields: [productId], references: [item_id])
}

model Attendance {
  id           String    @id @default(uuid())
  userId       String    @map("userId")
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  type         String    @default("gym")
  channel      String    @default("unknown")
  stationId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  durationMins Int?      @map("duration")
  user         User      @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
  @@map("Attendance")
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  imageUrl  String
  link      String?
  createdAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  createdAt   DateTime @default(now())
  slug        String   @unique
}

model Gallery {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
}

model Fingerprint {
  id       String @id @default(cuid())
  user_id  String @unique
  template Bytes
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("fingerprints")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String
  code      String
  token     String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}
